package utils.results.task

import utilities.{ makeStatus, makeErrorStatus}
import domains.responses._
import status.invite._
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global
import play.api.libs.json.JsValue
import utils.invite.forms._

import play.api.libs.json._
import play.api.data.Form
import play.api.i18n.Messages.implicitMessagesProviderToMessages
import play.api.i18n.{ I18nSupport, Messages , MessagesProvider }

val UserSuccessResult = makeStatus(_:ResponseOK)
val UserFailureResult = makeStatus(_:ResponseError)

def InviteFormError[T](errorForm: Form[T])
(
  using I18nSupport, MessagesProvider
) = {

  val errorsJson: JsValue = errorForm.errorsAsJson
  Future(makeStatus(InvalidInviteForm(errorsJson)))
}
